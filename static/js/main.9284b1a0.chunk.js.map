{"version":3,"sources":["View.tsx","utils.tsx","views/Login.tsx","views/Home.tsx","views/Course.tsx","views/Lesson.tsx","views/Discussion.tsx","routes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledView","styled","motion","div","background","stackIndex","View","props","initial","animate","exit","transition","clamp","ease","duration","getRandomHexColor","Math","random","toString","substr","routes","component","to","pathsArray","Object","keys","variants","diff","x","opacity","Container","App","arbitaryPath","location","useLocation","prevRoute","React","useRef","currentRoute","getStackIndexDiff","current","pathname","find","path","matchPath","custom","key","entries","map","data","exact","render","match","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9284b1a0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\n\ntype StyledProps = {\n  background: string;\n  stackIndex: number;\n};\n\nconst StyledView = styled(motion.div)<StyledProps>`\n  background: ${({ background }) => background};\n  z-index: ${({ stackIndex }) => stackIndex};\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: center;\n  min-width: 100vw;\n  min-height: 100vh;\n`;\n\nexport type ViewProps = React.ComponentProps<typeof StyledView>;\n\nexport const View: React.FC<ViewProps> = (props) => (\n  <StyledView\n    initial=\"initial\"\n    animate=\"animate\"\n    exit=\"exit\"\n    transition={{ clamp: true, ease: 'easeInOut', duration: 0.3 }}\n    {...props}\n  />\n);\n","export function getRandomHexColor() {\n  return '#' + Math.random().toString(16).substr(2, 6);\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { View, ViewProps } from '../View';\nimport { getRandomHexColor } from '../utils';\n\nconst background = getRandomHexColor();\n\nexport const Login: React.FC<ViewProps> = (props) => {\n  return (\n    <View background={background} {...props}>\n      <h1>Login</h1>\n      <Link to=\"/home\">Log in</Link>\n    </View>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { View, ViewProps } from '../View';\nimport { getRandomHexColor } from '../utils';\n\nconst background = getRandomHexColor();\n\nexport const Home: React.FC<ViewProps> = (props) => {\n  return (\n    <View background={background} {...props}>\n      <Link to=\"/login\">Logout</Link>\n      <h1>Home</h1>\n      <Link to={'/course/123'}>Course</Link>\n    </View>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { View, ViewProps } from '../View';\nimport { getRandomHexColor } from '../utils';\n\nconst background = getRandomHexColor();\n\nexport const Course: React.FC<ViewProps> = (props) => {\n  return (\n    <View background={background} {...props}>\n      <Link to=\"/home\">Back</Link>\n      <h1>Course</h1>\n      <Link to=\"/lesson/123\">Lesson</Link>\n      <Link to=\"/discussion/123\">Discussion</Link>\n    </View>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { View, ViewProps } from '../View';\nimport { getRandomHexColor } from '../utils';\n\nconst background = getRandomHexColor();\n\nexport const Lesson: React.FC<ViewProps> = (props) => {\n  return (\n    <View background={background} {...props}>\n      <Link to=\"/course/123\">Back</Link>\n      <h1>Lesson</h1>\n    </View>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { View, ViewProps } from '../View';\nimport { getRandomHexColor } from '../utils';\n\nconst background = getRandomHexColor();\n\nexport const Discussion: React.FC<ViewProps> = (props) => {\n  return (\n    <View background={background} {...props}>\n      <Link to=\"/course/123\">Back</Link>\n      <h1>Discussion</h1>\n    </View>\n  );\n};\n","import { matchPath } from 'react-router-dom';\nimport { Login } from './views/Login';\nimport { Home } from './views/Home';\nimport { Course } from './views/Course';\nimport { Lesson } from './views/Lesson';\nimport { Discussion } from './views/Discussion';\n\nexport const routes = {\n  '/login': {\n    component: Login,\n    stackIndex: 0,\n  },\n  '/home': {\n    component: Home,\n    stackIndex: 0,\n  },\n  '/course/:id': {\n    component: Course,\n    stackIndex: 1,\n  },\n  '/lesson/:id': {\n    component: Lesson,\n    stackIndex: 2,\n  },\n  '/discussion/:id': {\n    component: Discussion,\n    stackIndex: 2,\n  },\n};\n\nexport type Path = keyof typeof routes;\n\nconst pathsArray = Object.keys(routes) as Path[];\n\n// Given '/course/123', returns '/course/:id' from the routes object.\n// Returns undefined if no match is found\nexport function getMatchingRoute(arbitaryPath: string) {\n  return pathsArray.find((path) => matchPath(arbitaryPath, { path }));\n}\n\n// Diffs the stackIndex between the previous path and the current path,\n// to know how to animate the transition between the two components\nexport function getStackIndexDiff(\n  prevRoute: Path | undefined,\n  currentRoute: Path | undefined\n): number {\n  if (!prevRoute || !currentRoute) {\n    return 0;\n  }\n\n  return routes[currentRoute].stackIndex - routes[prevRoute].stackIndex;\n}\n","import React from 'react';\nimport { Switch, Route, Redirect, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { AnimatePresence } from 'framer-motion';\nimport { routes, Path, getMatchingRoute, getStackIndexDiff } from './routes';\n\nconst variants = {\n  initial: (diff: number) => {\n    if (diff < 0) {\n      return { x: 0 };\n    }\n\n    if (diff === 0) {\n      return { opacity: 0 };\n    }\n\n    return { x: '100%' };\n  },\n  animate: (diff: number) => {\n    if (diff === 0) {\n      return { opacity: 1 };\n    }\n\n    return { x: 0 };\n  },\n  // Value of this function parameter comes from AnimatePresence custom prop\n  exit: (diff: number) => {\n    if (diff < 0) {\n      return { x: '100%' };\n    }\n\n    if (diff === 0) {\n      return { opacity: 0 };\n    }\n\n    return { x: 0 };\n  },\n};\n\nconst App: React.FC = () => {\n  const location = useLocation();\n\n  const prevRoute = React.useRef<Path>();\n\n  const diff = getStackIndexDiff(\n    prevRoute.current,\n    getMatchingRoute(location.pathname)\n  );\n\n  return (\n    <Container>\n      <AnimatePresence initial={false} custom={diff}>\n        <Switch key={location.pathname} location={location}>\n          {Object.entries(routes).map(([path, data]) => (\n            <Route\n              exact={true}\n              path={path}\n              render={({ match }) => {\n                prevRoute.current = match.path as Path;\n\n                return (\n                  <data.component\n                    custom={diff}\n                    variants={variants}\n                    stackIndex={data.stackIndex}\n                  />\n                );\n              }}\n            />\n          ))}\n          <Redirect to=\"/login\" />\n        </Switch>\n      </AnimatePresence>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow-x: hidden;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}