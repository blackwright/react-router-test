{"version":3,"sources":["store/slices/user.ts","hooks/useAuth.ts","components/login/Login.tsx","routes/routes.ts","components/home/Home.tsx","components/course/Course.tsx","components/lesson/Lesson.tsx","components/discussion/Discussion.tsx","routes/transitions.ts","routes/utils.ts","components/View.tsx","components/Router.tsx","App.tsx","serviceWorker.ts","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["userSlice","createSlice","name","reducers","login","state","token","logout","initialState","useAuth","dispatch","useDispatch","isLoggedIn","useSelector","user","React","useCallback","actions","useMemo","routes","component","to","onClick","stackIndex","isPublic","transitions","initial","diff","x","opacity","animate","exit","console","log","pathsArray","Object","keys","StyledView","styled","motion","div","View","props","transition","ease","duration","Router","memo","arbitaryPath","location","previousPathRef","useRef","prevRoute","currentRoute","prevStackIndex","getStackIndexDiff","current","pathname","find","path","matchPath","exact","custom","key","from","entries","map","data","render","variants","App","Container","Boolean","window","hostname","match","rootReducer","combineReducers","reducer","store","configureStore","require","ReactDOM","StrictMode","document","getElementById","appRender","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4244947a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\ntype SliceState = {\n  token: string;\n};\n\nconst initialState: SliceState = {\n  token: ''\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  reducers: {\n    login: (state) => {\n      state.token = 'token';\n    },\n    logout: (state) => {\n      state.token = '';\n    }\n  },\n  initialState\n});\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userSlice } from 'store/slices/user';\n\nexport function useAuth() {\n  const dispatch = useDispatch();\n\n  const isLoggedIn = useSelector((state: RootState) => !!state.user.token);\n\n  const login = React.useCallback(() => {\n    dispatch(userSlice.actions.login());\n  }, [dispatch]);\n\n  const logout = React.useCallback(() => {\n    dispatch(userSlice.actions.logout());\n  }, [dispatch]);\n\n  return React.useMemo(() => ({ isLoggedIn, login, logout }), [\n    isLoggedIn,\n    login,\n    logout\n  ]);\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useAuth } from 'hooks/useAuth';\n\nexport const Login: React.FC = () => {\n  const { login, isLoggedIn } = useAuth();\n\n  if (isLoggedIn) {\n    return <Redirect to=\"/home\" />;\n  }\n\n  return (\n    <>\n      <h1>Login</h1>\n      <button onClick={login}>Log in</button>\n    </>\n  );\n};\n","import { Path, RouteData } from './types';\nimport { Login } from 'components/login/Login';\nimport { Home } from 'components/home/Home';\nimport { Course } from 'components/course/Course';\nimport { Lesson } from 'components/lesson/Lesson';\nimport { Discussion } from 'components/discussion/Discussion';\n\nexport const routes: Record<Path, RouteData> = {\n  '/login': {\n    component: Login,\n    stackIndex: 0,\n    isPublic: true,\n  },\n  '/home': {\n    component: Home,\n    stackIndex: 0,\n  },\n  '/course/:id': {\n    component: Course,\n    stackIndex: 1,\n  },\n  '/lesson/:id': {\n    component: Lesson,\n    stackIndex: 2,\n  },\n  '/discussion/:id': {\n    component: Discussion,\n    stackIndex: 2,\n  },\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from 'hooks/useAuth';\n\nexport const Home: React.FC = () => {\n  const { logout } = useAuth();\n\n  return (\n    <>\n      <button onClick={logout}>Logout</button>\n      <h1>Home</h1>\n      <Link to={'/course/123'}>Course</Link>\n    </>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Course: React.FC = () => {\n  return (\n    <>\n      <Link to=\"/home\">Back</Link>\n      <h1>Course</h1>\n      <Link to=\"/lesson/123\">Lesson</Link>\n      <Link to=\"/discussion/123\">Discussion</Link>\n    </>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Lesson: React.FC = () => {\n  return (\n    <>\n      <Link to=\"/course/123\">Back</Link>\n      <h1>Lesson</h1>\n    </>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Discussion: React.FC = () => {\n  return (\n    <>\n      <Link to=\"/course/123\">Back</Link>\n      <h1>Discussion</h1>\n    </>\n  );\n};\n","export const transitions = {\n  initial: (diff: number) => {\n    if (diff < 0) {\n      return { x: 0 };\n    }\n\n    if (diff === 0) {\n      return { opacity: 0 };\n    }\n\n    return { x: '100%' };\n  },\n  animate: (diff: number) => {\n    if (diff === 0) {\n      return { opacity: 1 };\n    }\n\n    return { x: 0 };\n  },\n  // Value of this function parameter comes from the Router AnimatePresence custom prop\n  exit: (diff: number) => {\n    console.log('diff', diff);\n    if (diff < 0) {\n      return { x: '100%' };\n    }\n\n    if (diff === 0) {\n      return { opacity: 0 };\n    }\n\n    return { x: 0 };\n  }\n};\n","import { matchPath } from 'react-router-dom';\nimport { routes } from './routes';\nimport { Path } from './types';\n\nconst pathsArray = Object.keys(routes) as Path[];\n\n// Given '/course/123', returns '/course/:id' from the routes object.\n// Returns undefined if no match is found\nexport function getMatchingRoute(arbitaryPath: string) {\n  return pathsArray.find((path) =>\n    matchPath(arbitaryPath, { exact: true, path })\n  );\n}\n\n// Diffs the stackIndex between the previous path and the current path,\n// to know how to animate the transition between the two components\nexport function getStackIndexDiff(\n  prevRoute: Path | undefined,\n  currentRoute: Path | undefined\n): number {\n  const prevStackIndex = prevRoute ? routes[prevRoute].stackIndex : 0;\n  const currentStackIndex = currentRoute ? routes[currentRoute].stackIndex : 0;\n\n  return currentStackIndex - prevStackIndex;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\n\ntype StyledProps = {\n  stackIndex: number;\n};\n\nconst StyledView = styled(motion.div)<StyledProps>`\n  z-index: ${({ stackIndex }) => stackIndex};\n  background: gray;\n  box-shadow: 3px 3px 15px 0px rgba(0, 0, 0, 0.75);\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: center;\n  justify-content: center;\n  min-width: 100vw;\n  min-height: 100vh;\n`;\n\nexport type ViewProps = React.ComponentProps<typeof StyledView>;\n\nexport const View: React.FC<ViewProps> = (props) => (\n  <StyledView\n    initial=\"initial\"\n    animate=\"animate\"\n    exit=\"exit\"\n    transition={{ ease: 'easeInOut', duration: 0.3 }}\n    {...props}\n  />\n);\n","import * as H from 'history';\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport { routes } from 'routes/routes';\nimport { transitions } from 'routes/transitions';\nimport { getMatchingRoute, getStackIndexDiff } from 'routes/utils';\nimport { Path, RouteData } from 'routes/types';\nimport { useAuth } from 'hooks/useAuth';\nimport { View } from './View';\n\ntype Props = {\n  location: H.Location;\n};\n\nexport const Router: React.FC<Props> = React.memo(({ location }) => {\n  const previousPathRef = React.useRef<Path>();\n\n  const diff = getStackIndexDiff(\n    previousPathRef.current,\n    getMatchingRoute(location.pathname)\n  );\n\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AnimatePresence initial={false} custom={diff}>\n      <Switch key={location.pathname} location={location}>\n        <Redirect exact={true} from=\"/\" to=\"/home\" />\n\n        {(Object.entries(routes) as Array<[Path, RouteData]>).map(\n          ([path, data]) => {\n            return (\n              <Route\n                key={path}\n                exact={true}\n                path={path}\n                render={() => {\n                  // We can keep track of the previously rendered path\n                  // by using a mutable ref, without causing the re-renders\n                  // that would happen if we used Redux or a hook\n                  if (data.isPublic || isLoggedIn) {\n                    previousPathRef.current = path;\n                  }\n\n                  return (\n                    <View\n                      custom={diff}\n                      variants={transitions}\n                      stackIndex={data.stackIndex}\n                    >\n                      {data.isPublic || isLoggedIn ? (\n                        <data.component />\n                      ) : (\n                        <Redirect to=\"/login\" />\n                      )}\n                    </View>\n                  );\n                }}\n              />\n            );\n          }\n        )}\n\n        <Redirect to=\"/home\" />\n      </Switch>\n    </AnimatePresence>\n  );\n});\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Router } from 'components/Router';\n\nexport const App: React.FC = () => (\n  <Container>\n    <Route>{({ location }) => <Router location={location} />}</Route>\n  </Container>\n);\n\nconst Container = styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow-x: hidden;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { userSlice } from './slices/user';\n\nexport const rootReducer = combineReducers({\n  user: userSlice.reducer\n});\n\ndeclare global {\n  type RootState = ReturnType<typeof rootReducer>;\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './rootReducer';\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').rootReducer;\n    store.replaceReducer(newRootReducer);\n  });\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from 'store/store';\nimport './index.css';\n\nfunction appRender() {\n  const { App } = require('./App');\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nappRender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./App', appRender);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}